//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CNC12.Model
{
    using CNC12.ViewModels;
    using System;
    using System.Collections.Generic;
    
    public partial class MachinesCNC : BaseVM
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public MachinesCNC()
        {
            this.EventManagerCNCs = new HashSet<EventManagerCNC>();
        }
    
        public int Id { get; set; }
        public string Model { get; set; }
        public Nullable<int> IdBaoTriCuaMay { get; set; }
    
        public virtual BaoTriCuaMayCNC BaoTriCuaMayCNC { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<EventManagerCNC> EventManagerCNCs { get; set; }
        private static MachinesCNC _instance = null;
        public static MachinesCNC instance
        {
            get
            {
                if (_instance == null)
                    _instance = new MachinesCNC();
                return _instance;
            }
        }
        private static MachinesCNC _instance1 = null;
        public static MachinesCNC instance1
        {
            get
            {
                if (_instance1 == null)
                    _instance1 = new MachinesCNC();
                return _instance1;
            }
        }
        public enum Machine3State
        {
            Running, Stopping, Falling
        }
        public enum MachineDoor2Status
        {
            Openning, Closing
        }
        private MachineDoor2Status _statedoor;
        public MachineDoor2Status statedoor
        {
            get
            {
                return _statedoor;
            }
            set
            {
                _statedoor = value;
                OnPropertyChanged("statedoor");
            }
        }

        private Machine3State _machinestate;
        public Machine3State machinestate
        {
            get
            {
                return _machinestate;
            }
            set
            {
                _machinestate = value;
                OnPropertyChanged("machinestate");
            }
        }
        public static void CheckState(Wises wise)
        {
            foreach (var str in wise.DIVal)
            {
                int i = str.Ch;
                int[] Ch = { 0, 1, 2, 3, 4, 5, 6, 7 };
                switch (Ch[i])
                {
                    case 0:
                        if (str.Stat == 1)
                        {
                            instance.machinestate = Machine3State.Running;
                        }
                        break;
                    case 1:
                        if (str.Stat == 1)
                        {
                            instance.machinestate = Machine3State.Stopping;
                        }
                        break;
                        // vcl
                    case 2:
                        if (str.Stat == 1)
                        {
                            instance.machinestate = Machine3State.Falling;
                        }
                        break;
                    case 3:
                        if (str.Stat == 1)
                        {
                            instance.statedoor = MachineDoor2Status.Closing;
                        }
                        else
                        {
                            instance.statedoor = MachineDoor2Status.Openning;
                        }
                        break;
                    case 4:
                        if (str.Stat == 1)
                        {
                            instance1.machinestate = Machine3State.Running;
                        }
                        break;
                    case 5:
                        if (str.Stat == 1)
                        {
                            instance1.machinestate = Machine3State.Stopping;
                        }
                        break;
                    case 6:
                        if (str.Stat == 1)
                        {
                            instance1.machinestate = Machine3State.Falling;
                        }
                        break;
                    case 7:
                        if (str.Stat == 1)
                        {
                            instance1.statedoor = MachineDoor2Status.Closing;
                        }
                        else
                        {
                            instance1.statedoor = MachineDoor2Status.Openning;
                        }
                        break;
                }
            }
        }
    }
}
